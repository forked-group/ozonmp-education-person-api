// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aaa2ppp/ozonmp-education-person-api/internal/app/retranslator/consumer (interfaces: EventLocker)

// Package mock_consumer is a generated GoMock package.
package mock_consumer

import (
	reflect "reflect"

	person "github.com/aaa2ppp/ozonmp-education-person-api/internal/model/person"
	gomock "github.com/golang/mock/gomock"
)

// MockEventLocker is a mock of EventLocker interface.
type MockEventLocker struct {
	ctrl     *gomock.Controller
	recorder *MockEventLockerMockRecorder
}

// MockEventLockerMockRecorder is the mock recorder for MockEventLocker.
type MockEventLockerMockRecorder struct {
	mock *MockEventLocker
}

// NewMockEventLocker creates a new mock instance.
func NewMockEventLocker(ctrl *gomock.Controller) *MockEventLocker {
	mock := &MockEventLocker{ctrl: ctrl}
	mock.recorder = &MockEventLockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventLocker) EXPECT() *MockEventLockerMockRecorder {
	return m.recorder
}

// Lock mocks base method.
func (m *MockEventLocker) Lock(arg0 uint64) ([]person.PersonEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", arg0)
	ret0, _ := ret[0].([]person.PersonEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lock indicates an expected call of Lock.
func (mr *MockEventLockerMockRecorder) Lock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockEventLocker)(nil).Lock), arg0)
}
